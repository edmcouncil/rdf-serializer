#!/bin/bash
#
# pre-commit hook script that activates the rdf-toolkit to serialize any OWL files in a standard format just before
# they are committed to the (local) Github repository.
#
# Called by "git commit" with no arguments. This hook can stop the commit when it encounters an error.
#
# To enable this hook, rename this file to "pre-commit" and save it in the directory <your git clone root>/.git/hooks
#

#
# Redirect all output generated by this script to stderr.
#
exec 1>&2

log_prefix="rdf-toolkit: "

echo "${log_prefix}This is the pre-commit hook"

java_exe=""
base_dir=""

function log() {
  echo "${log_prefix}$@"
}

function log_error() {
  echo "ERROR: $@"
}

function findJava() {

  local whichJava="$(which java)"

  if [ "${whichJava}" == "" ] ; then
    if [ "${JAVA_HOME}" == "" ] ; then
      log_error "Could not find java on your PATH or your JAVA_HOME"
      return 1
    fi
    if [ -x "${JAVA_HOME}/bin/java" ] ; then
      whichJava="${JAVA_HOME}/bin/java"
    else
      log_error "Could not find java in your JAVA_HOME: ${JAVA_HOME}"
      return 1
    fi
  fi

  local versionJava="$(${whichJava} -version 2>&1 | head -n 1 | cut -d \"  -f 2)"

  set -- ${versionJava//./ }

  local java_major=$1
  local java_minor=$2

  if [ $java_major -eq 1 -a $java_minor -gt 7 ] ; then
  	:
  else
    log_error "You are using Java $java_major.$java_minor whereas the rdf-toolkit requires Java 1.7 or higher"
    return 2
  fi

  java_exe="${whichJava}"

  return 0
}

function findToolkitJar() {

  toolkit_jar="$(cd -P ~/git/rdf-toolkit ; pwd)/target/rdf-toolkit.jar"

  if [ -f "${toolkit_jar}" ] ; then
  	log "Found toolkit: ${toolkit_jar}"
  	return 0
  fi

  log_error "Could not find toolkit, please reinstall"

  return 1
}

function findBaseDir() {

  #
  # For now, we just take the top level directory of the current git repository as the base dir
  #
  base_dir=$(git rev-parse --show-toplevel)

  if [ "${base_dir}" == "" ] ; then
    log_error "Could not find base directory"
    return 1
  fi
  if [ ! -d "${base_dir}" ] ; then
    log_error "Could not find base directory"
    return 1
  fi

  return 0
}

function showFilesThatAreInCommit() {

  git diff --cached --name-only
}

function serialize() {

  local file="$1"
  local extension="${file##*.}"
  local logcfg="/tmp/rdf-toolkit-log"

  case ${extension} in
  	rdf|owl|nt|n3|ttl)
   	  ;;
    *)
      log "Skipping unsupported file $file"
      return 0
  esac

  cat > ${logcfg} << __log_config__
[logger_root]
level: error
handlers: h1

[handler_h1]
level: error
class: ConsoleHandler
formatter: f1

[formatter_f1]
class: DefaultFormatter
format: (%l) %t
__log_config__

  log "Launching the rdf-toolkit with --input-file ${file}"

  set -x
      "${java_exe}" -Xmx1g "-Dorg.clapper.avsl.config=${logcfg}" -cp "${RDF_TOOLKIT_JAR}" org.edmcouncil.rdf_toolkit.RdfFormatter \
        --source "${file}" \
        --target "${file}X" \
        --target-format ${target_format} \
        --use-dtd-subset \
        --inline-blank-nodes \
        --infer-base-iri \
        --omit-xmlns-namespace
  rc=$?
  set +x

  rm -f "${logcfg}" >/dev/null 2>&1


  if [ ${rc} -eq 0 ] ; then
    log "Re-adding potentially re-serialized file to git staging area: ${file}"
    git add --update ${file}
  else
    log_error "rdf-toolkit ended with error code ${rc}"
  fi

  return ${rc}
}

function serialize_all() {

  #echo "Checking the following files:"
  #showFilesThatAreInCommit

  for fileToBeCommitted in $(git diff --cached --name-only) ; do
    if ! serialize $fileToBeCommitted ; then
      return 1
    fi
  done

  return 0
}

function main() {

	findJava || return 1
	findToolkitJar || return 2
	findBaseDir || return 3
    serialize_all
}

main $*
rc=$?
if [ $rc -gt 0 ] ; then
  log_error "Could not commit your files"
fi
exit $rc
